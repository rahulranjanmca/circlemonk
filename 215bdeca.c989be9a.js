(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{231:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return s}));t(0);var r=t(277);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}const o={id:"performance",title:"Javascript Performance And Optimization Interview Questions",sidebar_label:"Performance And Optimization"},i=[{value:"Why is eval() considered evil and dangerous?",id:"why-is-eval-considered-evil-and-dangerous",children:[]}],l={rightToc:i},c="wrapper";function s({components:e,...n}){return Object(r.b)(c,a({},l,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h3",{id:"why-is-eval-considered-evil-and-dangerous"},"Why is eval() considered evil and dangerous?"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"eval")," function allows you to inject a string and evaluate it at any time."),Object(r.b)("p",null,"Let's look at this example:"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{}),'var morning = "good morning";\n\nfunction speak(greeting){\n  console.log(morning);\n}\n\nspeak(morning);\n\n')),Object(r.b)("p",null,"This logs ",Object(r.b)("inlineCode",{parentName:"p"},"good morning"),". But what about this:"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{}),'var greeting = "good morning";\n\nfunction speak(str){\n  eval(str);\n  console.log(greeting);\n}\n\nspeak("var greeting = \'meow\'");\n\n')),Object(r.b)("p",null,"This will log ",Object(r.b)("inlineCode",{parentName:"p"},"meow"),". Meow... indeed. Since no local ",Object(r.b)("inlineCode",{parentName:"p"},"greeting")," variable was defined. We expected\nto access the global scope, instead, ",Object(r.b)("inlineCode",{parentName:"p"},"eval")," injected a new local variable into our scope."),Object(r.b)("p",null,"So how bad is this:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"You leave your code vulnerable to malicious code injection"),Object(r.b)("li",{parentName:"ul"},"You slow down your code's performance")),Object(r.b)("p",null,"To clarify, I wouldn't call it \"evil\", but I'd say it's dangerous and should be avoided in most cases. There are some unique scenarios\nwhere an eval is needed, but for 99% of your ",Object(r.b)("inlineCode",{parentName:"p"},"eval")," is not necessary."))}s.isMDXComponent=!0},277:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return u}));var r=t(0),a=t.n(r),o=a.a.createContext({}),i=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=i(e.components);return a.a.createElement(o.Provider,{value:n},e.children)};var c="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),p=i(t),u=r,d=p[l+"."+u]||p[u]||s[u]||o;return t?a.a.createElement(d,Object.assign({},{ref:n},c,{components:t})):a.a.createElement(d,Object.assign({},{ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);